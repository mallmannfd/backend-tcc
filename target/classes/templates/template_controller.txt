package {app_pkg}.controller;

import javax.validation.Valid;

import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import {app_pkg}.dto.request.{model_name}ReqDTO;
import {app_pkg}.dto.response.{model_name}ResDTO;
import {app_pkg}.mapper.{model_name}Mapper;
import {app_pkg}.model.{model_name};
import {app_pkg}.service.{model_name}Service;
import {app_pkg}.spec.{model_name}Spec;
import {app_pkg}.util.PageQueryParam;
import {app_pkg}.util.SearchUtil;
import {app_pkg}.util.dto.GenericValue;
import {app_pkg}.util.dto.ListDTO;
import {app_pkg}.util.dto.PageDTO;
import {app_pkg}.util.dto.PageQueryDTO;

import lombok.AllArgsConstructor;

@AllArgsConstructor
@RestController
@RequestMapping(value = "/api/{endpoint}", produces = MediaType.APPLICATION_JSON_VALUE)
public class {model_name}Controller {

    private final {model_name}Service service;
    private final {model_name}Mapper mapper;

    @GetMapping
    @PageQueryParam
    public PageDTO<{model_name}ResDTO> index(PageQueryDTO query) {
        var spec = {model_name}Spec.byFilter(query.getFilter());
        var pageable = SearchUtil.toPageable(query);
        var page = this.service.findAll(spec, pageable);
        return new PageDTO<>(page.map(mapper::toDto));
    }

    @GetMapping("/{id}")
    public {model_name}ResDTO show(@PathVariable("id") {id_type} id) {
        var entity = this.service.findById(id);
        return this.mapper.toDto(entity);
    }

    @PostMapping
    public GenericValue<{id_type}> store(@Valid @RequestBody {model_name}ReqDTO dto) {
        var entity = this.mapper.fromDto(new {model_name}(), dto);
        entity = this.service.save(entity);
        return GenericValue.of(entity.getId());
    }

    @PutMapping("/{id}")
    public void update(@PathVariable("id") {id_type} id, @Valid @RequestBody {model_name}ReqDTO dto) {
        var entity = this.service.findById(id);
        entity = this.mapper.fromDto(entity, dto);
        this.service.save(entity);
    }

    @DeleteMapping("/{id}")
    public void logicalExclusion(@PathVariable("id") {id_type} id) {
        this.service.softDelete(id);
    }

    @GetMapping("/many")
    public ListDTO<{model_name}ResDTO> showMany(@RequestParam {id_type}[] ids) {
        var list = this.service.findByIds(ids);
        return ListDTO.of(this.mapper.toDto(list));
    }

    @GetMapping("/recycle-bin")
    @PageQueryParam
    public PageDTO<{model_name}ResDTO> showDeleted(PageQueryDTO query) {
        var spec = {model_name}Spec.byFilter(query.getFilter());
        var pageable = SearchUtil.toPageable(query);
        var page = this.service.findAllDeleted(spec, pageable);
        return new PageDTO<>(page.map(mapper::toDto));
    }

    @PutMapping("/restore/{id}")
    public void restoreDeleted(@PathVariable("id") {id_type} id) {
        this.service.restoreDeleted(id);
    }

    @DeleteMapping("/destroy/{id}")
    public void permanentDestroy(@PathVariable("id") {id_type} id) {
        this.service.permanentDestroy(id);
    }
}
